
@page "/FiyiRequirements/RequirementFilePage/{RequirementId:int}"

@using FiyiRequirements.Areas.FiyiRequirements.Repositories;
@using FiyiRequirements.Areas.FiyiRequirements.Entities;
@using FiyiRequirements.Areas.FiyiRequirements.DTOs;
@inject RequirementFileRepository requirementfileRepository;
@inject RequirementRepository requirementRepository;

<PageTitle>Buscar archivos - FiyiRequirements</PageTitle>

<FiyiRequirements.Components.Layout.NavBarVerticalDashboard lstFoldersAndPages="lstFoldersAndPages"></FiyiRequirements.Components.Layout.NavBarVerticalDashboard>

<div class="main-content position-relative max-height-vh-100 h-100">
    <FiyiRequirements.Components.Layout.NavBarHorizontalDashboard></FiyiRequirements.Components.Layout.NavBarHorizontalDashboard>
    <div class="container-fluid px-2 px-md-4">
        <div class="page-header min-height-300 border-radius-xl mt-4"
             style="background-image: url('assets/img/illustrations/Landscape2.jpg');">
            <span class="mask bg-gradient-primary opacity-6"></span>
        </div>
        <div class="card card-body mx-3 mx-md-4 mt-n6">
            <div class="card-header mb-0 pb-0 bg-white">
                <h1 >
                    Buscar archivos
                </h1>
                <h5 class="mb-3">
                    Requerimiento: @requirementTitle
                </h5>
                <NavLink class="btn btn-outline-info" href="@linkVolver">
                    <span class="fas fa-chevron-left" aria-hidden="true"></span>
                    &nbsp;Volver
                </NavLink>
                <NavLink class="btn btn-success text-white" href="@linkToCreate">
                    <span class="fas fa-plus" aria-hidden="true"></span>
                    &nbsp;Subir archivo
                </NavLink>
            </div>
            <div class="card-body px-0">
                @((MarkupString)Message)
                <div class="row">
                    <div class="col-12 col-md-4">
                        <!--Searchbox-->
                        <input type="search" @oninput="SearchText"
                               class="form-control"
                               placeholder="Buscar por ruta del archivo..." />
                        <br />
                        <h6><b>Tipo de vista</b></h6>
                        <div class="btn-group mb-3" role="group" aria-label="btngroup">
                            <button type="button" 
                                class="btn bg-gradient-primary"
                                onclick=@(() => ChangeView("table"))>
                                <i class="fas fa-table"></i>
                                Tabla
                            </button>
                            <button type="button" 
                                class="btn bg-gradient-primary"
                                onclick=@(() => ChangeView("list"))>
                                <i class="fas fa-th-list"></i>
                                Cartas
                            </button>
                        </div>
                    </div>
                    <div class="col-12 col-md-8">
                        <div class="row">
                            <div class="d-flex justify-content-end">
                                <!--Export buttons-->
                                <button type="button"
                                        @onclick="ConvertToExcel"
                                        class="btn btn-outline-info ml-4 mb-4">
                                    <i class="fas fa-file"></i>
                                    Exportar a Excel
                                </button>
                                <button type="button"
                                        @onclick="ConvertToCSV"
                                        class="btn btn-outline-warning mb-4 mx-3">
                                    <i class="fas fa-file"></i>
                                    Exportar a CSV
                                </button>
                                <button type="button"
                                        @onclick="ConvertToPDF"
                                        class="btn btn-outline-success mb-4">
                                    <i class="fas fa-file"></i>
                                    Exportar a PDF
                                </button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="d-flex justify-content-end">
                                <!--Download buttons-->
                                @if (ShowDownloadButtonForExcel)
                                {
                                    <a class="btn btn-info mb-4"
                                    href="@DownloadPathForExcel"
                                    download>
                                        <i class="fas fa-download"></i>
                                        Descargar
                                    </a>
                                }
                                @if (ShowDownloadButtonForCSV)
                                {
                                    <a class="btn btn-warning mb-4 mx-3"
                                    href="@DownloadPathForCSV"
                                    download>
                                        <i class="fas fa-download"></i>
                                        Descargar
                                    </a>
                                }
                                @if (ShowDownloadButtonForPDF)
                                {
                                    <a class="btn btn-success mb-4"
                                    href="@DownloadPathForPDF"
                                    download>
                                        <i class="fas fa-download"></i>
                                        Descargar
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <!--Table-->
                <h6><b>Nº de archivos: @TotalRows</b></h6>
                @if (ChosenView == "table")
                {
                    <table class="table table-striped table-hover table-bordered table-responsive mt-4">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Activo</th>
                                <th>Fecha de creación</th>
                                <th>Fecha de última modificación</th>
                                <th>Usuario creador</th>
                                <th>Último usuario modificador</th>
                                <th>Requerimiento</th>
                                <th>Ruta del archivo</th>

                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (paginatedRequirementFileDTO != null)
                            {
                                @for (int i = 0; i < paginatedRequirementFileDTO.lstRequirementFile.Count(); i++)
                                {
                                    int deleteButton = paginatedRequirementFileDTO.lstRequirementFile[i]!.RequirementFileId;
                                    <tr>
                                        <td>@paginatedRequirementFileDTO.lstRequirementFile[i]?.RequirementFileId</td>
                                        @if (@paginatedRequirementFileDTO.lstRequirementFile[i]!.Active)
                                        {
                                            <td>
                                                <span class="badge rounded-pill bg-success">Sí</span>
                                            </td>
                                        }
                                        else
                                        {
                                            <td>
                                                <span class="badge rounded-pill bg-danger">No</span>
                                            </td>
                                        }
                                        <td>@paginatedRequirementFileDTO.lstRequirementFile[i]?.DateTimeCreation</td>
                                        <td>@paginatedRequirementFileDTO.lstRequirementFile[i]?.DateTimeLastModification</td>
                                        <td>@paginatedRequirementFileDTO.lstUserCreation[i]?.Email</td>
                                        <td>@paginatedRequirementFileDTO.lstUserLastModification[i]?.Email</td>
                                        <td>@paginatedRequirementFileDTO.lstRequirement[i]?.Title</td>
                                        <td>
                                            <a class="nav-link text-info"
                                               href="@paginatedRequirementFileDTO.lstRequirementFile[i]?.FilePath"
                                            download>
                                                <b class="fas fa-download"></b>
                                                @paginatedRequirementFileDTO.lstRequirementFile[i]?.FilePath
                                            </a>
                                        </td>

                                        <td>
                                            <div class="nav-item">
                                                <button class="btn btn-sm btn-outline-danger"
                                                        onclick=@(() => Delete(deleteButton))>
                                                    <span class="fas fa-trash" aria-hidden="true"></span>
                                                </button>
                                            </div>
                                            <div class="nav-item mt-2">
                                                <a class="btn btn-sm btn-outline-info"
                                                   href="FiyiRequirements/RequirementFilePage/@paginatedRequirementFileDTO.lstRequirementFile[i]?.RequirementFileId">
                                                    <span class="fas fa-pen" aria-hidden="true"></span>
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    @if (paginatedRequirementFileDTO != null)
                    {
                        @for (int i = 0; i < paginatedRequirementFileDTO.lstRequirementFile.Count(); i++)
                        {
                            int deleteButton = paginatedRequirementFileDTO.lstRequirementFile[i]!.RequirementFileId;

                            <div class="card shadow-lg mt-2">
                                <div class="card-body">
                                    <p><b>ID: </b>@paginatedRequirementFileDTO.lstRequirementFile[i]?.RequirementFileId</p>
                                    @if (@paginatedRequirementFileDTO.lstRequirementFile[i]!.Active)
                                    {
                                        <p>
                                            <b>Activo: </b>
                                            <span class="badge rounded-pill bg-success">
                                                Sí
                                            </span>
                                        </p>
                                    }
                                    else
                                    {
                                        <p>
                                            <b>Activo: </b>
                                            <span class="badge rounded-pill bg-danger">
                                                No
                                            </span>
                                        </p>
                                    }
                                    <p><b>Fecha de creación: </b>@paginatedRequirementFileDTO.lstRequirementFile[i]?.DateTimeCreation</p>
                                    <p><b>Fecha de última modificación: </b>@paginatedRequirementFileDTO.lstRequirementFile[i]?.DateTimeLastModification</p>
                                    <p><b>Usuario creador: </b>@paginatedRequirementFileDTO.lstUserCreation[i]?.Email</p>
                                    <p><b>Último usuario modificador: </b>@paginatedRequirementFileDTO.lstUserLastModification[i]?.Email</p>
                                    <p><b>Requerimiento: </b>@paginatedRequirementFileDTO.lstRequirement[i]?.Title</p>
                                    <a class="nav-link text-info px-0"
                                       href="@paginatedRequirementFileDTO.lstRequirementFile[i]?.FilePath"
                                    download>
                                        <b>Ruta del archivo: </b>
                                        <b class="fas fa-download"></b>
                                        @paginatedRequirementFileDTO.lstRequirementFile[i]?.FilePath
                                    </a>

                                </div>
                                <div class="card-footer text-body-secondary">
                                    <div class="row">
                                        <div class="col-10">
                                            &nbsp;
                                        </div>
                                        <div class="col-2">
                                            <button class="btn btn-lg btn-outline-danger"
                                            onclick=@(() => Delete(deleteButton))>
                                                <span class="fas fa-trash" aria-hidden="true"></span>
                                            </button>
                                            <a class="btn btn-lg btn-outline-info"
                                               href="FiyiRequirements/RequirementFilePage/@paginatedRequirementFileDTO.lstRequirementFile[i]?.RequirementFileId">
                                                <span class="fas fa-pen" aria-hidden="true"></span>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }

                <nav aria-label="Page navigation example">
                    <ul class="pagination justify-content-center">
                        <li class="page-item
                        @(paginatedRequirementFileDTO!.HasPreviousPage ? "" : "disabled")">
                            <button class="page-link"
                            disabled="@(!paginatedRequirementFileDTO.HasPreviousPage)"
                            @onclick="() => OnPreviousPage()">
                                <i class="fas fa-chevron-left"></i>
                            </button>
                        </li>
                        @for (int i = 1; i <= paginatedRequirementFileDTO.TotalPages; i++)
                        {
                            int currentPage = i;
                            <li class="page-item
                            @(i == paginatedRequirementFileDTO.PageIndex ? "active" : "")">
                                <button class="page-link"
                                onclick=@(() => OnPageSelected(currentPage))>
                                    @i
                                </button>
                            </li>
                        }
                        <li class="page-item
                        @(paginatedRequirementFileDTO.HasNextPage ? "" : "disabled")">
                            <button class="page-link"
                                    disabled="@(!paginatedRequirementFileDTO.HasNextPage)"
                                    @onclick="() => OnNextPage()">
                                <i class="fas fa-chevron-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
    <FiyiRequirements.Components.Layout.FooterDashboard></FiyiRequirements.Components.Layout.FooterDashboard>
</div>

@code {
    #region Properties
    [Parameter]
    public int RequirementId { get; set; }

    public string requirementTitle { get; set; } = "";

    public List<folderForDashboard> lstFoldersAndPages = new();

    public int TotalRows { get; set; } = 0;

    public string? ChosenView { get; set; }

    public bool checkStrict { get; set; }

    public string TextToSearch { get; set; } = "";

    public string Message { get; set; } = "";

    public bool ShowDownloadButtonForExcel { get; set; }
    public bool ShowDownloadButtonForPDF { get; set; }
    public bool ShowDownloadButtonForCSV { get; set; }

    public string? DownloadPathForExcel { get; set; }
    public string? DownloadPathForPDF { get; set; }
    public string? DownloadPathForCSV { get; set; }

    public User User = new();

    public RequirementFile RequirementFile = new();

    paginatedRequirementFileDTO paginatedRequirementFileDTO = new();

    public string linkVolver { get; set; } = "";

    public string linkToCreate { get; set; } = "";
    #endregion

    protected override void OnInitialized()
    {
        try
        {
            //Look for saved user in shared component, simulates a session
            User = StateContainer.User == null ? new() : StateContainer.User;

            lstFoldersAndPages = [];

            paginatedRequirementFileDTO = new();
            paginatedRequirementFileDTO.lstRequirementFile = [];

            if (User != null)
            {
                if (User.UserId != 0)
                {
                    //Logged user
                    if (User.RoleId != 1) //Only Root can access
                    {
                        NavigationManager.NavigateTo("403");
                    }

                    List<Menu> lstMenu = menuRepository
                                            .GetAll();

                    lstFoldersAndPages = rolemenuRepository
                                            .GetAllPagesAndFoldersForDashboardByRoleId(User.RoleId);

                    paginatedRequirementFileDTO = requirementfileRepository
                                                .GetAllByFilePathAndRequirementIdPaginated(
                                                    "",
                                                    RequirementId,
                                                    checkStrict,
                                                    1,
                                                    15);

                    requirementTitle = requirementRepository.GetByRequirementId(RequirementId).Title;

                    TotalRows = requirementfileRepository
                                    .CountByRequirementId(RequirementId);

                    ChosenView = "list";

                    linkVolver = $@"/FiyiRequirements/RequirementPage/{RequirementId}";

                    linkToCreate = $@"/FiyiRequirements/RequirementFilePage/{RequirementId}/0";
                }
                else
                {
                    //Not logged user

                    //Redirect to...
                    NavigationManager.NavigateTo("Login");
                }
            }
            else
            {
                //Impossible
            }

            base.OnInitialized();
        }
        catch (Exception ex)
        {
            Failure failure = new()
            {
                Active = true,
                DateTimeCreation = DateTime.Now,
                DateTimeLastModification = DateTime.Now,
                UserCreationId = 1,
                UserLastModificationId = 1,
                EmergencyLevel = 1,
                Comment = "",
                Message = ex.Message,
                Source = ex.Source,
                StackTrace = ex.StackTrace
            };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }

    }

    #region Events
    private async Task SearchText(ChangeEventArgs args)
    {
        try
        {
            //Basic configuration
            Message = "";

            TextToSearch = args.Value.ToString();

            paginatedRequirementFileDTO = requirementfileRepository
                                        .GetAllByFilePathAndRequirementIdPaginated(
                                            TextToSearch,
                                            RequirementId,
                                            checkStrict,
                                            1,
                                            15);

            TotalRows = requirementfileRepository
                                    .CountByRequirementId(RequirementId);

            //Re-render the page
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            Failure failure = new()
            {
                Active = true,
                DateTimeCreation = DateTime.Now,
                DateTimeLastModification = DateTime.Now,
                UserCreationId = 1,
                UserLastModificationId = 1,
                EmergencyLevel = 1,
                Comment = "",
                Message = ex.Message,
                Source = ex.Source,
                StackTrace = ex.StackTrace
            };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }

    }

    private async Task OnPreviousPage()
    {
        if (paginatedRequirementFileDTO.HasPreviousPage)
        {
            paginatedRequirementFileDTO = requirementfileRepository
                                        .GetAllByFilePathAndRequirementIdPaginated(
                                            TextToSearch,
                                            RequirementId,
                                            checkStrict,
                                            (paginatedRequirementFileDTO.PageIndex - 1),
                                            paginatedRequirementFileDTO.PageSize);
        }

        TotalRows = requirementfileRepository
                                    .CountByRequirementId(RequirementId);

        //Re-render the page
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }

    private async Task OnPageSelected(int pageIndex)
    {
        paginatedRequirementFileDTO = requirementfileRepository
                                            .GetAllByFilePathAndRequirementIdPaginated(
                                                TextToSearch,
                                                RequirementId,
                                                checkStrict,
                                                pageIndex,
                                                paginatedRequirementFileDTO.PageSize);

        TotalRows = requirementfileRepository
                                    .CountByRequirementId(RequirementId);

        //Re-render the page
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }

    private async Task OnNextPage()
    {
        if (paginatedRequirementFileDTO.HasNextPage)
        {
            paginatedRequirementFileDTO = requirementfileRepository
                                        .GetAllByFilePathAndRequirementIdPaginated(
                                            TextToSearch,
                                            RequirementId,
                                            checkStrict,
                                            (paginatedRequirementFileDTO.PageIndex + 1),
                                            paginatedRequirementFileDTO.PageSize);
        }

        TotalRows = requirementfileRepository
                                    .CountByRequirementId(RequirementId);

        //Re-render the page
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }

    private async Task ChangeView(string chosenView)
    {
        ChosenView = chosenView;

        //Re-render the page
        await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
    }

    private async Task Delete(int requirementfileId)
    {
        try
        {
            requirementfileRepository.DeleteByRequirementFileId(requirementfileId);

            paginatedRequirementFileDTO = requirementfileRepository
                                        .GetAllByFilePathAndRequirementIdPaginated(
                                            TextToSearch,
                                            RequirementId,
                                            checkStrict,
                                            1,
                                            15);

            TotalRows = requirementfileRepository
                                    .CountByRequirementId(RequirementId);

            TextToSearch = "";

            Message = $@"<div class=""alert alert-success text-white font-weight-bold"" role=""alert"">
                                Register deleted correctly
                            </div>";

            //Re-render the page
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            Failure failure = new()
            {
                Active = true,
                DateTimeCreation = DateTime.Now,
                DateTimeLastModification = DateTime.Now,
                UserCreationId = 1,
                UserLastModificationId = 1,
                EmergencyLevel = 1,
                Comment = "",
                Message = ex.Message,
                Source = ex.Source,
                StackTrace = ex.StackTrace
            };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }
    }
    #endregion

    #region Conversions
    private async Task ConvertToExcel()
    {
        try
        {
            //Set initial state
            Message = "";

            using var Book = new XLWorkbook();

            DataTable dtRequirementFile = new DataTable();
            dtRequirementFile.TableName = "RequirementFile";

            //We define another DataTable dtRequirementFileCopy to avoid issue related to DateTime conversion
            DataTable dtRequirementFileCopy = new DataTable();
            dtRequirementFileCopy.TableName = "RequirementFile";

            #region Define columns for dtRequirementFileCopy
            DataColumn dtColumnRequirementFileIdFordtRequirementFileCopy = new DataColumn();
            dtColumnRequirementFileIdFordtRequirementFileCopy.DataType = typeof(string);
            dtColumnRequirementFileIdFordtRequirementFileCopy.ColumnName = "RequirementFileId";
            dtRequirementFileCopy.Columns.Add(dtColumnRequirementFileIdFordtRequirementFileCopy);

            DataColumn dtColumnActiveFordtRequirementFileCopy = new DataColumn();
            dtColumnActiveFordtRequirementFileCopy.DataType = typeof(string);
            dtColumnActiveFordtRequirementFileCopy.ColumnName = "Active";
            dtRequirementFileCopy.Columns.Add(dtColumnActiveFordtRequirementFileCopy);

            DataColumn dtColumnDateTimeCreationFordtRequirementFileCopy = new DataColumn();
            dtColumnDateTimeCreationFordtRequirementFileCopy.DataType = typeof(string);
            dtColumnDateTimeCreationFordtRequirementFileCopy.ColumnName = "DateTimeCreation";
            dtRequirementFileCopy.Columns.Add(dtColumnDateTimeCreationFordtRequirementFileCopy);

            DataColumn dtColumnDateTimeLastModificationFordtRequirementFileCopy = new DataColumn();
            dtColumnDateTimeLastModificationFordtRequirementFileCopy.DataType = typeof(string);
            dtColumnDateTimeLastModificationFordtRequirementFileCopy.ColumnName = "DateTimeLastModification";
            dtRequirementFileCopy.Columns.Add(dtColumnDateTimeLastModificationFordtRequirementFileCopy);

            DataColumn dtColumnUserCreationIdFordtRequirementFileCopy = new DataColumn();
            dtColumnUserCreationIdFordtRequirementFileCopy.DataType = typeof(string);
            dtColumnUserCreationIdFordtRequirementFileCopy.ColumnName = "UserCreationId";
            dtRequirementFileCopy.Columns.Add(dtColumnUserCreationIdFordtRequirementFileCopy);

            DataColumn dtColumnUserLastModificationIdFordtRequirementFileCopy = new DataColumn();
            dtColumnUserLastModificationIdFordtRequirementFileCopy.DataType = typeof(string);
            dtColumnUserLastModificationIdFordtRequirementFileCopy.ColumnName = "UserLastModificationId";
            dtRequirementFileCopy.Columns.Add(dtColumnUserLastModificationIdFordtRequirementFileCopy);

            DataColumn dtColumnRequirementIdFordtRequirementFileCopy = new DataColumn();
            dtColumnRequirementIdFordtRequirementFileCopy.DataType = typeof(string);
            dtColumnRequirementIdFordtRequirementFileCopy.ColumnName = "RequirementId";
            dtRequirementFileCopy.Columns.Add(dtColumnRequirementIdFordtRequirementFileCopy);

            DataColumn dtColumnFilePathFordtRequirementFileCopy = new DataColumn();
            dtColumnFilePathFordtRequirementFileCopy.DataType = typeof(string);
            dtColumnFilePathFordtRequirementFileCopy.ColumnName = "FilePath";
            dtRequirementFileCopy.Columns.Add(dtColumnFilePathFordtRequirementFileCopy);

            
            #endregion

            dtRequirementFile = requirementfileRepository.GetAllInDataTable();

            foreach (DataRow DataRow in dtRequirementFile.Rows)
            {
                dtRequirementFileCopy.Rows.Add(DataRow.ItemArray);
            }

            var Sheet = Book.Worksheets.Add(dtRequirementFileCopy);

            Sheet.ColumnsUsed().AdjustToContents();

            DownloadPathForExcel = $@"wwwroot/Downloads/ExcelFiles/{DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss_fff")}.xlsx";
            Book.SaveAs(DownloadPathForExcel);

            //Delete wwwroot from path to download correctly
            DownloadPathForExcel = DownloadPathForExcel.Replace("wwwroot", "");

            ShowDownloadButtonForExcel = true;

            //Re-render the page
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);

        }
        catch (Exception ex)
        {
            Failure failure = new()
            {
                Active = true,
                DateTimeCreation = DateTime.Now,
                DateTimeLastModification = DateTime.Now,
                UserCreationId = 1,
                UserLastModificationId = 1,
                EmergencyLevel = 1,
                Comment = "",
                Message = ex.Message,
                Source = ex.Source,
                StackTrace = ex.StackTrace
            };

            failureRepository.Add(failure);
                        
            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }
    }

    private async Task ConvertToCSV()
    {
        try
        {
            //Set initial state
            Message = "";

            List<RequirementFile?> lstRequirementFile = requirementfileRepository
                                    .GetAll();

            DownloadPathForCSV = $@"wwwroot/Downloads/CSVFiles/{DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss_fff")}.csv";

            using (var Writer = new StreamWriter(DownloadPathForCSV))
            using (var CsvWriter = new CsvWriter(Writer,
                CultureInfo.InvariantCulture))
            {
                CsvWriter.WriteRecords(lstRequirementFile);
            }

            //Delete wwwroot from path to download correctly
            DownloadPathForCSV = DownloadPathForCSV.Replace("wwwroot", "");

            ShowDownloadButtonForCSV = true;

            //Re-render the page
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);             
        }
        catch (Exception ex)
        {
            Failure failure = new()
            {
                Active = true,
                DateTimeCreation = DateTime.Now,
                DateTimeLastModification = DateTime.Now,
                UserCreationId = 1,
                UserLastModificationId = 1,
                EmergencyLevel = 1,
                Comment = "",
                Message = ex.Message,
                Source = ex.Source,
                StackTrace = ex.StackTrace
            };

            failureRepository.Add(failure);
            
            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }
    }

    private async Task ConvertToPDF()
    {
        try
        {
            //Set initial state
            Message = "";
            string ProjectName = "FiyiRequirements";
            string Table = "RequirementFile";
            var Renderer = new HtmlToPdf();
            string RowsAsHTML = "";

            List<RequirementFile> lstRequirementFile = requirementfileRepository
                                    .GetAll();

            DownloadPathForPDF = $@"wwwroot/Downloads/PDFFiles/{DateTime.Now.ToString("yyyy_MM_dd_HH_mm_ss_fff")}.pdf";

            foreach (RequirementFile? RequirementFile in lstRequirementFile)
            {
                RowsAsHTML += $@"{RequirementFile?.ToStringOnlyValuesForHTML()}";
            }

            Renderer.RenderHtmlAsPdf($@"<table cellpadding=""0"" cellspacing=""0"" border=""0"" width=""88%"" style=""width: 88% !important; min-width: 88%; max-width: 88%;"">
    <tr>
    <td align=""left"" valign=""top"">
        <font face=""'Source Sans Pro', sans-serif"" color=""#1a1a1a"" style=""font-size: 52px; line-height: 55px; font-weight: 300; letter-spacing: -1.5px;"">
            <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #1a1a1a; font-size: 52px; line-height: 55px; font-weight: 300; letter-spacing: -1.5px;"">{ProjectName}</span>
        </font>
        <div style=""height: 25px; line-height: 25px; font-size: 23px;"">&nbsp;</div>
        <font face=""'Source Sans Pro', sans-serif"" color=""#4c4c4c"" style=""font-size: 36px; line-height: 45px; font-weight: 300; letter-spacing: -1px;"">
            <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #4c4c4c; font-size: 36px; line-height: 45px; font-weight: 300; letter-spacing: -1px;"">Registers of {Table}</span>
        </font>
        <div style=""height: 35px; line-height: 35px; font-size: 33px;"">&nbsp;</div>
    </td>
    </tr>
</table>
<br>
<table cellpadding=""0"" cellspacing=""0"" border=""0"" width=""100%"" style=""width: 100% !important; min-width: 100%; max-width: 100%;"">
    <tr>
        <th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">RequirementFileId&nbsp;&nbsp;&nbsp;</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th><th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">Active&nbsp;&nbsp;&nbsp;</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th><th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">DateTimeCreation&nbsp;&nbsp;&nbsp;</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th><th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">DateTimeLastModification&nbsp;&nbsp;&nbsp;</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th><th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">UserCreationId&nbsp;&nbsp;&nbsp;</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th><th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">UserLastModificationId&nbsp;&nbsp;&nbsp;</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th><th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">RequirementId&nbsp;&nbsp;&nbsp;</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th><th align=""left"" valign=""top"" style=""border-width: 1px; border-style: solid; border-color: #e8e8e8; border-top: none; border-left: none; border-right: none;"">
            <font face=""'Source Sans Pro', sans-serif"" color=""#000000"" style=""font-size: 20px; line-height: 28px; font-weight: 600;"">
                <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #000000; font-size: 20px; line-height: 28px; font-weight: 600;"">FilePath&nbsp;&nbsp;&nbsp;</span>
            </font>
            <div style=""height: 10px; line-height: 10px; font-size: 8px;"">&nbsp;</div>
        </th>
    </tr>
    {RowsAsHTML}
</table>
<br>
<font face=""'Source Sans Pro', sans-serif"" color=""#868686"" style=""font-size: 17px; line-height: 20px;"">
    <span style=""font-family: 'Source Sans Pro', Arial, Tahoma, Geneva, sans-serif; color: #868686; font-size: 17px; line-height: 20px;"">Printed on: {DateTime.Now}</span>
</font>
").SaveAs(DownloadPathForPDF);

            ShowDownloadButtonForPDF = true;

            //Delete wwwroot from path to download correctly
            DownloadPathForPDF = DownloadPathForPDF.Replace("wwwroot", "");

            //Re-render the page
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);

        }
        catch (Exception ex)
        {
            Failure failure = new()
            {
                Active = true,
                DateTimeCreation = DateTime.Now,
                DateTimeLastModification = DateTime.Now,
                UserCreationId = 1,
                UserLastModificationId = 1,
                EmergencyLevel = 1,
                Comment = "",
                Message = ex.Message,
                Source = ex.Source,
                StackTrace = ex.StackTrace
            };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                            </div>";
        }

    }
    #endregion
}

