
@page "/FiyiRequirements/RequirementPage/{RequirementId:int}"

@using FiyiRequirements.Areas.FiyiRequirements.Repositories;
@using FiyiRequirements.Areas.FiyiRequirements.Entities;
@using FiyiRequirements.Areas.FiyiRequirements.DTOs;
@using FiyiRequirements.Areas.CMSCore.Repositories;
@inject RequirementRepository requirementRepository;
@inject RequirementStateRepository requirementStateRepository;
@inject RequirementPriorityRepository requirementPriorityRepository;
@inject UserRepository userRepository;

@if (RequirementId == 0)
{
    <PageTitle>Agregar requerimiento - FiyiRequirements</PageTitle>
}
else
{
    <PageTitle>Editar requerimiento - FiyiRequirements</PageTitle>
}

<FiyiRequirements.Components.Layout.NavBarVerticalDashboard lstFoldersAndPages="lstFoldersAndPages"></FiyiRequirements.Components.Layout.NavBarVerticalDashboard>

<div class="main-content position-relative max-height-vh-100 h-100">
    <FiyiRequirements.Components.Layout.NavBarHorizontalDashboard></FiyiRequirements.Components.Layout.NavBarHorizontalDashboard>
    <div class="container-fluid px-2 px-md-4">
        <div class="page-header min-height-300 border-radius-xl mt-4"
             style="background-image: url('assets/img/illustrations/Landscape2.jpg');">
            <span class="mask bg-gradient-primary opacity-6"></span>
        </div>
        <div class="card card-body mx-3 mx-md-4 mt-n6">
            <div class="card-header mb-0 pb-0 bg-white">
                <h1 class="mb-3">
                    @if(RequirementId == 0)
                    {
                        <span>Agregar requerimiento</span>
                    }
                    else
                    {
                        <span>Editar requerimiento</span>
                    }
                </h1>
                <NavLink class="btn btn-outline-info" href="FiyiRequirements/RequirementPage">
                    <span class="fas fa-chevron-left"></span>
                    &nbsp;Volver
                </NavLink>
            </div>
            <div class="card-body px-0">
                <form method="post" @onsubmit="Submit"
                      @formname="requirement-form" class="mb-4">
                    <AntiforgeryToken />
                    <!--Title-->
                    <div class="mb-3">
                        <label for="title"
                               class="input-group input-group-static">
                            Título
                        </label>
                        <input type="text"
                               id="title"
                               class="form-control"
                               required
                               @bind="Requirement!.Title" />
                    </div>
                    <!--Body-->
                    <div class="mb-3">
                        <label for="quill-editor-body"
                               class="input-group input-group-static">
                            Cuerpo
                        </label>
                        <div id="quill-editor-body">
                        </div>
                        <button id="button-quill-conversion-body"
                        type="button"
                        class="btn btn-outline-primary my-2">
                            Convertir a HTML
                        </button>
                        <input type="text"
                               id="quill-result-body"
                               class="form-control"
                               
                               @bind="Requirement!.Body" />
                    </div>
                    <link rel="stylesheet" href="assets/vendor/quill/dist/quill.snow.css">
                    <script type="text/javascript">
                        var quilleditorbody = new Quill("#quill-editor-body", {
                            theme: 'snow',
                            modules: {
                                toolbar: {
                                    container: [
                                        [{ header: [1, 2, 3, 4, 5, 6, false] }],
                                        ["bold", "italic", "underline", "strike"],
                                        [{ list: "ordered" }, { list: "bullet" }],
                                        ["link", "image", "video"],
                                        ["clean"]
                                    ],
                                    handlers: {
                                        image: imageHandlerBody,
                                        video: videoHandlerBody
                                    }
                                }
                            }
                        });

                        function imageHandlerBody() {
                            var range = this.quill.getSelection();
                            var value = prompt('Por favor, ingrese la URL de la imagen');
                            if (value) {
                                this.quill.insertEmbed(range.index, 'image', value, Quill.sources.USER);
                            }
                        }

                        function videoHandlerBody() {
                            var range = this.quill.getSelection();
                            var value = prompt('Por favor, ingrese la URL del video');
                            if (value) {
                                this.quill.insertEmbed(range.index, 'video', value, Quill.sources.USER);
                            }
                        }

                        $("#button-quill-conversion-body").on("click", function () {
                            var htmlbody = quilleditorbody.root.innerHTML;
                            $("#quill-result-body").val(htmlbody)
                        });

                        $(document).ready(function () {
                            quilleditorbody.container.childNodes[0].innerHTML = quilleditorbody.getText();
                        });
                    </script>
                    <script src="assets/vendor/quill/dist/quill.min.js"></script>
                    <!--RequirementStateId-->
                    <div class="mb-3">
                        <label for="requirementstateid"
                               class="input-group input-group-static">
                            Estado
                        </label>
                        <select id="requirementstateid"
                            class="form-control"
                            @bind=Requirement.RequirementStateId>
                            <option value="0" selected>Seleccionar</option>
                            @foreach (FiyiRequirements.Areas.FiyiRequirements.Entities.RequirementState state in lstState)
                            {
                                <option value="@state.RequirementStateId">@state.Name</option>
                            }
                        </select>
                    </div>
                    <!--RequirementPriorityId-->
                    <div class="mb-3">
                        <label for="requirementpriorityid"
                               class="input-group input-group-static">
                            Prioridad
                        </label>
                        <select id="requirementpriorityid"
                            class="form-control"
                            @bind=Requirement.RequirementPriorityId>
                            <option value="0" selected>Seleccionar</option>
                            @foreach (FiyiRequirements.Areas.FiyiRequirements.Entities.RequirementPriority priority in lstPriority)
                            {
                                <option value="@priority.RequirementPriorityId">@priority.Name</option>
                            }
                        </select>
                    </div>
                    <!--UserEmployeeId-->
                    <div class="mb-3">
                        <label for="useremployeeid"
                               class="input-group input-group-static">
                            Usuario/Empleado a asignar
                        </label>
                        <select id="useremployeeid"
                            class="form-control"
                            @bind=Requirement.UserEmployeeId>
                            <option value="0" selected>Seleccionar</option>
                            @foreach (FiyiRequirements.Areas.CMSCore.Entities.User employee in lstEmployee)
                            {
                                <option value="@employee.UserId">@employee.Email</option>
                            }
                        </select>
                    </div>
                    
                    <hr />
                    <button id="btn-submit" type="submit"
                            class="btn bg-gradient-primary">
                        <i class="fas fa-pen"></i>
                        @if (RequirementId == 0)
                        {
                            <span>Agregar</span>
                        }
                        else
                        {
                            <span>Editar</span>
                        }
                    </button>
                    <NavLink class="btn btn-outline-info" href="FiyiRequirements/RequirementPage">
                        <span class="fas fa-chevron-left"></span>
                        &nbsp;Volver
                    </NavLink>
                </form>
                @if(RequirementId == 0)
                {
                    <div class="alert alert-info text-white font-weight-bold" role="alert">
                        Cuando el requerimiento se encuentre creado, podrá acceder a
                        notas, archivos e historial de cambios
                    </div>
                }
                else
                {
                    <NavLink href="@linkNotas"
                    class="btn btn-block btn-info">
                        <i class="fas fa-clipboard"></i>
                        Notas
                    </NavLink>
                    <NavLink href="@linkArchivos"
                             class="btn btn-block btn-info">
                        <i class="fas fa-file"></i>
                        Archivos
                    </NavLink>
                    <NavLink href="@linkHistorial"
                             class="btn btn-block btn-info">
                        <i class="fas fa-clock"></i>
                        Historial
                    </NavLink>
                }
                @((MarkupString)Message)
            </div>
        </div>
    </div>

    <FiyiRequirements.Components.Layout.FooterDashboard></FiyiRequirements.Components.Layout.FooterDashboard>
</div>

@code {
    #region Properties
    public List<folderForDashboard> lstFoldersAndPages = new();

    public List<Role> lstRole { get; set; } = [];

    [Parameter]
    public int RequirementId { get; set; }

    public string Message { get; set; } = "";

    [SupplyParameterFromForm]
    public Requirement Requirement { get; set; } = new();

    public User User { get; set; } = new();

    public List<FiyiRequirements.Areas.FiyiRequirements.Entities.RequirementState> lstState = [];

    public List<FiyiRequirements.Areas.FiyiRequirements.Entities.RequirementPriority> lstPriority = [];

    public List<FiyiRequirements.Areas.CMSCore.Entities.User> lstEmployee = [];

    public string linkNotas { get; set; } = "";

    public string linkArchivos { get; set; } = "";

    public string linkHistorial { get; set; } = "";
    #endregion

    protected override void OnInitialized()
    {
        try
        {
            //Look for saved user in shared component, simulates a session
            User = StateContainer.User == null ? new() : StateContainer.User;

            lstFoldersAndPages = [];
            Requirement = new();

            if (User != null)
            {
                if (User.UserId != 0)
                {
                    //Logged user
                    if (User.RoleId != 1) //Only Root can access
                    {
                        NavigationManager.NavigateTo("403");
                    }

                    List<Menu> lstMenu = menuRepository
                                        .GetAll();

                    lstFoldersAndPages = rolemenuRepository
                                            .GetAllPagesAndFoldersForDashboardByRoleId(User.RoleId);

                    lstRole = roleRepository.GetAll();

                    lstState = requirementStateRepository.GetAll();

                    lstPriority = requirementPriorityRepository.GetAll();

                    lstEmployee = userRepository.GetAllByRoleAsRoot();

                    if (RequirementId == 0)
                    {
                        //Create new Requirement
                        Requirement = new();
                    }
                    else
                    {
                        //Edit Requirement

                        Requirement = requirementRepository
                                    .GetByRequirementId(RequirementId);

                        linkNotas = $@"/FiyiRequirements/RequirementNotePage/{RequirementId}";

                        linkArchivos = $@"/FiyiRequirements/RequirementFilePage/{RequirementId}";

                        linkHistorial = $@"/FiyiRequirements/RequirementChangehistoryPage/{RequirementId}";
                    }
                }
                else
                {
                    //Not logged user

                    //Redirect to...
                    NavigationManager.NavigateTo("Login");
                }
            }
            else
            {
                //Impossible
            }

            base.OnInitialized();
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = 1,
                    UserLastModificationId = 1,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                    Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                                </div>";
        }
    }

    private async Task Submit()
    {
        try
        {
            if (Requirement.Title == "" || 
            Requirement.UserEmployeeId == 0 ||
            Requirement.RequirementPriorityId == 0 ||
            Requirement.RequirementStateId == 0)
            {
                Message = $@"<div class=""alert alert-info text-white font-weight-bold"" role=""alert"">
                                    Complete todos los datos, por favor.
                                </div>";
                return;
            }


            if (RequirementId == 0)
            {
                //Create new Requirement
                Requirement.RequirementId = 0;
                Requirement.Active = true;
                Requirement.UserCreationId = User.UserId;
                Requirement.UserLastModificationId = User.UserId;

                Requirement.DateTimeCreation = DateTime.Now;
                Requirement.DateTimeLastModification = DateTime.Now;

                requirementRepository
                        .Add(Requirement);
            }
            else
            {
                //Update data
                Requirement.DateTimeLastModification = DateTime.Now;
                Requirement.UserLastModificationId = User.UserId;

                requirementRepository
                            .Update(Requirement);
            }

            //Redirect to users page
            NavigationManager.NavigateTo("FiyiRequirements/RequirementPage");
        }
        catch (Exception ex)
        {
            Failure failure = new()
                {
                    Active = true,
                    DateTimeCreation = DateTime.Now,
                    DateTimeLastModification = DateTime.Now,
                    UserCreationId = 1,
                    UserLastModificationId = 1,
                    EmergencyLevel = 1,
                    Comment = "",
                    Message = ex.Message,
                    Source = ex.Source,
                    StackTrace = ex.StackTrace
                };

            failureRepository.Add(failure);

            Message = $@"<div class=""alert alert-danger text-white font-weight-bold"" role=""alert"">
                                    Hubo un error. Intente nuevamente. Mensaje del error: {ex.Message}
                                </div>";
        }
        finally
        {
            //Re-render the page to show ScannedText
            await InvokeAsync(() => StateHasChanged()).ConfigureAwait(false);
        }
    }

    
}

